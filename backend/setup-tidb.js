#!/usr/bin/env node

/**
 * TiDB Serverless Setup Helper
 * Helps configure real TiDB connection for BURNWISE
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const question = (prompt) => new Promise((resolve) => rl.question(prompt, resolve));

console.log('üî• BURNWISE TiDB Setup Helper');
console.log('================================\n');

async function setupTiDB() {
  console.log('üìå Step 1: Get TiDB Serverless Credentials');
  console.log('------------------------------------------');
  console.log('1. Go to: https://tidbcloud.com');
  console.log('2. Sign up/Login to TiDB Cloud');
  console.log('3. Create a new Serverless cluster (it\'s FREE!)');
  console.log('4. In cluster overview, click "Connect"');
  console.log('5. Select "General" connection method');
  console.log('6. Generate a password if needed\n');

  console.log('Enter your TiDB connection details:\n');

  // Get connection details
  const host = await question('TiDB Host (e.g., gateway01.us-west-2.prod.aws.tidbcloud.com): ');
  const port = await question('TiDB Port (default 4000): ') || '4000';
  const user = await question('TiDB User (e.g., 3pTAoNNegb47Uc8.root): ');
  const password = await question('TiDB Password: ');
  const database = await question('Database Name (default: burnwise): ') || 'burnwise';

  console.log('\nüìå Step 2: Get API Keys');
  console.log('------------------------');
  
  // OpenWeatherMap
  console.log('\nOpenWeatherMap API (Required for weather agent):');
  console.log('1. Go to: https://openweathermap.org/api');
  console.log('2. Sign up for free account');
  console.log('3. Get your API key from dashboard\n');
  const weatherKey = await question('OpenWeatherMap API Key: ');

  // Twilio (optional)
  console.log('\nTwilio SMS (Optional - press Enter to skip):');
  console.log('1. Go to: https://www.twilio.com');
  console.log('2. Sign up for free trial');
  console.log('3. Get Account SID, Auth Token, and Phone Number\n');
  const twilioSid = await question('Twilio Account SID (optional): ') || 'SKIP_TWILIO';
  const twilioToken = await question('Twilio Auth Token (optional): ') || 'SKIP_TWILIO';
  const twilioPhone = await question('Twilio Phone Number (optional): ') || '+1234567890';

  // OpenAI (optional)
  console.log('\nOpenAI API (Optional for embeddings - press Enter to skip):');
  const openaiKey = await question('OpenAI API Key (optional): ') || 'SKIP_OPENAI';

  console.log('\nüìå Step 3: Generating secure JWT secrets...');
  const jwtSecret = execSync('openssl rand -hex 32').toString().trim();
  const jwtRefreshSecret = execSync('openssl rand -hex 32').toString().trim();

  // Build .env content
  const envContent = `# BURNWISE Environment Configuration
# Generated by setup-tidb.js on ${new Date().toISOString()}

# TiDB Serverless Connection
TIDB_HOST=${host}
TIDB_PORT=${port}
TIDB_USER=${user}
TIDB_PASSWORD=${password}
TIDB_DATABASE=${database}

# Weather API (Required)
OPENWEATHERMAP_API_KEY=${weatherKey}

# SMS Alerts (Optional)
TWILIO_ACCOUNT_SID=${twilioSid}
TWILIO_AUTH_TOKEN=${twilioToken}
TWILIO_PHONE_NUMBER=${twilioPhone}

# AI Embeddings (Optional)
OPENAI_API_KEY=${openaiKey}

# JWT Secrets (Auto-generated)
JWT_SECRET=${jwtSecret}
JWT_REFRESH_SECRET=${jwtRefreshSecret}

# Server Configuration
PORT=5001
NODE_ENV=development

# Redis Cache (Optional)
REDIS_URL=redis://localhost:6379

# Logging
LOG_LEVEL=info
`;

  // Backup existing .env if it exists
  const envPath = path.join(__dirname, '.env');
  if (fs.existsSync(envPath)) {
    const backup = envPath + '.backup.' + Date.now();
    fs.renameSync(envPath, backup);
    console.log(`\n‚úÖ Backed up existing .env to: ${path.basename(backup)}`);
  }

  // Write new .env
  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ Created new .env file with real credentials');

  console.log('\nüìå Step 4: Testing TiDB Connection...');
  
  // Test connection
  try {
    const mysql = require('mysql2/promise');
    const connection = await mysql.createConnection({
      host,
      port: parseInt(port),
      user,
      password,
      database,
      ssl: {
        rejectUnauthorized: true
      }
    });

    console.log('‚úÖ Successfully connected to TiDB!');
    
    // Check if database exists, create if not
    const [databases] = await connection.execute('SHOW DATABASES');
    const dbExists = databases.some(db => db.Database === database);
    
    if (!dbExists) {
      console.log(`Creating database '${database}'...`);
      await connection.execute(`CREATE DATABASE IF NOT EXISTS ${database}`);
      console.log('‚úÖ Database created');
    }

    await connection.execute(`USE ${database}`);
    
    // Check for vector support
    try {
      await connection.execute(`
        SELECT VEC_COSINE_DISTANCE('[1,2,3]', '[4,5,6]') as test
      `);
      console.log('‚úÖ Vector functions supported!');
    } catch (e) {
      console.log('‚ö†Ô∏è  Vector functions may not be available. Check TiDB version.');
    }

    await connection.end();

    console.log('\nüéâ TiDB Setup Complete!');
    console.log('=======================\n');
    console.log('Next steps:');
    console.log('1. Run: npm run setup:db     # Create tables');
    console.log('2. Run: npm run seed          # Add demo data');
    console.log('3. Run: npm run dev           # Start the app');
    console.log('\nYour BURNWISE system is ready for the hackathon! üî•');

  } catch (error) {
    console.error('\n‚ùå Connection failed:', error.message);
    console.log('\nPlease check:');
    console.log('1. Your TiDB cluster is active (not paused)');
    console.log('2. Credentials are correct');
    console.log('3. Your IP is whitelisted (check cluster settings)');
    console.log('4. You have mysql2 installed: npm install mysql2');
  }

  rl.close();
}

// Run setup
setupTiDB().catch(console.error);